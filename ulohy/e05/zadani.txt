Into the initializer of `MorseCoder` from task E03 add next argument
`transmitter`. Then, define method `transmit`, which will accept one
string as the only argument. This method will first encode the string
into Morse code and it uses the result as an argument of method `puts`
called on the `transmitter` given in the initializer.

Then, define class `StandardTransmitter` that will have a method
`puts`. This method will accept one string argument and it will write
the argument on standard output. An instance of this class then use as
`transmitter` argument when creating a MorseCoder instance.

Then implement class `DebugTransmitter` that will also define method
`puts`. In this case however, it will print both length of the object
and then result of `inspect` method called on the argument.

Try, that this method `transmit` of the class `MorseCoder` works with
instances of both transmitter classes. Check on the difference when
calling the `transmit` method with empty string.

Put check into the initializer of `MorseCoder` that the `transmitter`
implements method `puts`. If it doesn't it will print a warning.

Then, implement an interfaces on a class `MorseCoder` using
`method_missing`, so that calling a single character method will
return Morse code of that character, e. g:

    coder = MorseCoder.new('|', StandardTransmitter)
    coder.a # => '.-'
    coder.b # => '-...'

--------

In the class `Bike` edit methods `front_gear_up!`, `front_gear_down!`,
`rear_gear_up!` and `rear_gear_down!` so that it uses the same code.
First, define private method `shift` that will switch the gear the
given direction. This method use in all relevant methods. Then,
replace the methods with `method_missing`.

############################################################################################

Do konstruktoru MorseCoder z úlohy E03 přidejte další argument `transmitter`.
Dále dodefinujte metodu transmit, ktera bude akceptovat
jako jediný argument string, ktery nejprve zakóduje do morseovky a výsledek použije jako
argument metody puts volané na transmitteru zadaném v konstruktoru.

Dále nadefinujte třídu StandardTransmitter, která bude mít jedinou metodu puts. Tato
metoda bude akceptovat jediný parametr, který vypíše na standardní výstup. Její instanci
pak použijte jako transmitter argument při vytváření instance MorseCoder.

Poté implementujte vlastní třídu DebugTransmitter, také s metodou puts, která svůj argument
vytiskne jednak délku zadaného argumentu a poté argument samotný avšak upravený metodou
inspect.

Vyzkoušejte, že metoda transmit třídy MorseCoder funguje s instancemi obou transmitterů.
Vyzkoušejte jak se výstup liší pro transmit prázdného stringu u obou Transmitterů.
Přidejte do konstruktoru kontrolu, že zadaný transmitter implementuje metodu puts.
Pokud ji nedefinuje, vypište varování.

Dále implementujte pomocí method_missing na třídě MorseCoder rozhraní tak, aby volání
metody s názvem jednoho písmenka abecedy vrátilo dané písmenko zakódované, tedy
např.

    coder = MorseCoder.new('|', StandardTransmitter)
    coder.a # => '.-'
    coder.b # => '-...'

--------

Ve třídě bike upravte metody front_gear_up! front_gear_down! rear_gear_up! rear_gear_down! tak,
aby používaly stejný kód. Nejprve definujte privátni metodu shift, která přeřadí na zadané
převodu zadaným směrem. Tuto metodu použijte ze všech řadících metod. Poté tyto metody nahraďte
pomocí method_missing.

