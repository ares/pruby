Define a class MorseCoder with two methods - encode and decode. As implementation
you can use methods from previous task.

Change the implementation so that the letter separator will be configurable as
a constructor parameter while | will be the default value.

In the same class implement a counter, which is increased whenever encode or decode
method is called. Implement class method that returns current status of the counter.

Define a class VerifiableMorseCoder that inherits from MorseCoder. This new class
will define a method verify which only argument will be string for verification. Method
should encode and then decode the string and verify it is equal to original string.
If they match it should return true, false otherwise.

--------------

Then create a class Bike which simulates bicycle. Initializer will accept 3 mandatory
arguments, max number of rear and front gears and a name. It will also accept two optional
arguments - color and size, size should default to of 26, color should be without default
value.

Class will have a register of all bikes that were created. Each bike will start with current
gears 1 and 1. It should also have methods front_gear_up! and front_gear_down! which changes
current gears up and down (respecting maximum and minimum). Also define methods for rear gear.

Then define methods:
* current_gear - outputs string representation of current gear configuration, e.g. "2x7"
* go! - runs for a distance that get evaluated as multiplication of gears and size of a wheel / 10 (e.g. 2.6)
* distance - the dostance that the bike already ran, default value of each bike is 0
* action - randomly choose one of following actions ront_gear_up! front_gear_down! rear_gear_up! rear_gear_down! go!
with probability 10%, only go will have 60%

You might find rand(n) method useful, it returns number from 0 to n-1

Last method to implement is to_s, which returns string representation of the bike in
following format

@name (@wheel_size"): ran @distance
